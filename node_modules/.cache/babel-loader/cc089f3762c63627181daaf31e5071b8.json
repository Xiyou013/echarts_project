{"ast":null,"code":"import { computed, inject, ref, useSlots, Text } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { useDeprecated } from '../../../hooks/use-deprecated/index.mjs';\nimport { buttonGroupContextKey } from '../../../tokens/button.mjs';\nimport { useGlobalConfig } from '../../../hooks/use-global-config/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\n\nconst useButton = (props, emit) => {\n  useDeprecated({\n    from: \"type.text\",\n    replacement: \"link\",\n    version: \"3.0.0\",\n    scope: \"props\",\n    ref: \"https://element-plus.org/en-US/component/button.html#button-attributes\"\n  }, computed(() => props.type === \"text\"));\n  const buttonGroupContext = inject(buttonGroupContextKey, void 0);\n  const globalConfig = useGlobalConfig(\"button\");\n  const {\n    form\n  } = useFormItem();\n\n  const _size = useSize(computed(() => buttonGroupContext == null ? void 0 : buttonGroupContext.size));\n\n  const _disabled = useDisabled();\n\n  const _ref = ref();\n\n  const slots = useSlots();\n\n  const _type = computed(() => props.type || (buttonGroupContext == null ? void 0 : buttonGroupContext.type) || \"\");\n\n  const autoInsertSpace = computed(() => {\n    var _a, _b, _c;\n\n    return (_c = (_b = props.autoInsertSpace) != null ? _b : (_a = globalConfig.value) == null ? void 0 : _a.autoInsertSpace) != null ? _c : false;\n  });\n  const shouldAddSpace = computed(() => {\n    var _a;\n\n    const defaultSlot = (_a = slots.default) == null ? void 0 : _a.call(slots);\n\n    if (autoInsertSpace.value && (defaultSlot == null ? void 0 : defaultSlot.length) === 1) {\n      const slot = defaultSlot[0];\n\n      if ((slot == null ? void 0 : slot.type) === Text) {\n        const text = slot.children;\n        return /^\\p{Unified_Ideograph}{2}$/u.test(text.trim());\n      }\n    }\n\n    return false;\n  });\n\n  const handleClick = evt => {\n    if (props.nativeType === \"reset\") {\n      form == null ? void 0 : form.resetFields();\n    }\n\n    emit(\"click\", evt);\n  };\n\n  return {\n    _disabled,\n    _size,\n    _type,\n    _ref,\n    shouldAddSpace,\n    handleClick\n  };\n};\n\nexport { useButton };","map":{"version":3,"mappings":";;;;;;;;;AASY,MAACA,SAAS,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;EACxCC,aAAa,CAAC;IACZC,IAAI,EAAE,WADM;IAEZC,WAAW,EAAE,MAFD;IAGZC,OAAO,EAAE,OAHG;IAIZC,KAAK,EAAE,OAJK;IAKZC,GAAG,EAAE;EALO,CAAD,EAMVC,QAAQ,CAAC,MAAMR,KAAK,CAACS,IAAN,KAAe,MAAtB,CANE,CAAb;EAOA,MAAMC,kBAAkB,GAAGC,MAAM,CAACC,qBAAD,EAAwB,KAAK,CAA7B,CAAjC;EACA,MAAMC,YAAY,GAAGC,eAAe,CAAC,QAAD,CAApC;EACA,MAAM;IAAEC;EAAF,IAAWC,WAAW,EAA5B;;EACA,MAAMC,KAAK,GAAGC,OAAO,CAACV,QAAQ,CAAC,MAAME,kBAAkB,IAAI,IAAtB,GAA6B,KAAK,CAAlC,GAAsCA,kBAAkB,CAACS,IAAhE,CAAT,CAArB;;EACA,MAAMC,SAAS,GAAGC,WAAW,EAA7B;;EACA,MAAMC,IAAI,GAAGf,GAAG,EAAhB;;EACA,MAAMgB,KAAK,GAAGC,QAAQ,EAAtB;;EACA,MAAMC,KAAK,GAAGjB,QAAQ,CAAC,MAAMR,KAAK,CAACS,IAAN,KAAeC,kBAAkB,IAAI,IAAtB,GAA6B,KAAK,CAAlC,GAAsCA,kBAAkB,CAACD,IAAxE,KAAiF,EAAxF,CAAtB;;EACA,MAAMiB,eAAe,GAAGlB,QAAQ,CAAC,MAAM;IACrC,IAAImB,EAAJ,EAAQC,EAAR,EAAYC,EAAZ;;IACA,OAAO,CAACA,EAAE,GAAG,CAACD,EAAE,GAAG5B,KAAK,CAAC0B,eAAZ,KAAgC,IAAhC,GAAuCE,EAAvC,GAA4C,CAACD,EAAE,GAAGd,YAAY,CAACiB,KAAnB,KAA6B,IAA7B,GAAoC,KAAK,CAAzC,GAA6CH,EAAE,CAACD,eAAlG,KAAsH,IAAtH,GAA6HG,EAA7H,GAAkI,KAAzI;EACD,CAH+B,CAAhC;EAIA,MAAME,cAAc,GAAGvB,QAAQ,CAAC,MAAM;IACpC,IAAImB,EAAJ;;IACA,MAAMK,WAAW,GAAG,CAACL,EAAE,GAAGJ,KAAK,CAACU,OAAZ,KAAwB,IAAxB,GAA+B,KAAK,CAApC,GAAwCN,EAAE,CAACO,IAAH,CAAQX,KAAR,CAA5D;;IACA,IAAIG,eAAe,CAACI,KAAhB,IAAyB,CAACE,WAAW,IAAI,IAAf,GAAsB,KAAK,CAA3B,GAA+BA,WAAW,CAACG,MAA5C,MAAwD,CAArF,EAAwF;MACtF,MAAMC,IAAI,GAAGJ,WAAW,CAAC,CAAD,CAAxB;;MACA,IAAI,CAACI,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAAC3B,IAA9B,MAAwC4B,IAA5C,EAAkD;QAChD,MAAMC,IAAI,GAAGF,IAAI,CAACG,QAAlB;QACA,OAAO,8BAA8BC,IAA9B,CAAmCF,IAAI,CAACG,IAAL,EAAnC,CAAP;MACD;IACF;;IACD,OAAO,KAAP;EACD,CAX8B,CAA/B;;EAYA,MAAMC,WAAW,GAAIC,GAAD,IAAS;IAC3B,IAAI3C,KAAK,CAAC4C,UAAN,KAAqB,OAAzB,EAAkC;MAChC7B,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAAC8B,WAAL,EAAxB;IACD;;IACD5C,IAAI,CAAC,OAAD,EAAU0C,GAAV,CAAJ;EACD,CALD;;EAMA,OAAO;IACLvB,SADK;IAELH,KAFK;IAGLQ,KAHK;IAILH,IAJK;IAKLS,cALK;IAMLW;EANK,CAAP;AAQF,CA9CY","names":["useButton","props","emit","useDeprecated","from","replacement","version","scope","ref","computed","type","buttonGroupContext","inject","buttonGroupContextKey","globalConfig","useGlobalConfig","form","useFormItem","_size","useSize","size","_disabled","useDisabled","_ref","slots","useSlots","_type","autoInsertSpace","_a","_b","_c","value","shouldAddSpace","defaultSlot","default","call","length","slot","Text","text","children","test","trim","handleClick","evt","nativeType","resetFields"],"sources":["../../../../../../packages/components/button/src/use-button.ts"],"sourcesContent":["import { Text, computed, inject, ref, useSlots } from 'vue'\nimport {\n  useDeprecated,\n  useDisabled,\n  useFormItem,\n  useGlobalConfig,\n  useSize,\n} from '@element-plus/hooks'\nimport { buttonGroupContextKey } from '@element-plus/tokens'\n\nimport type { SetupContext } from 'vue'\nimport type { ButtonEmits, ButtonProps } from './button'\n\nexport const useButton = (\n  props: ButtonProps,\n  emit: SetupContext<ButtonEmits>['emit']\n) => {\n  useDeprecated(\n    {\n      from: 'type.text',\n      replacement: 'link',\n      version: '3.0.0',\n      scope: 'props',\n      ref: 'https://element-plus.org/en-US/component/button.html#button-attributes',\n    },\n    computed(() => props.type === 'text')\n  )\n\n  const buttonGroupContext = inject(buttonGroupContextKey, undefined)\n  const globalConfig = useGlobalConfig('button')\n  const { form } = useFormItem()\n  const _size = useSize(computed(() => buttonGroupContext?.size))\n  const _disabled = useDisabled()\n  const _ref = ref<HTMLButtonElement>()\n  const slots = useSlots()\n\n  const _type = computed(() => props.type || buttonGroupContext?.type || '')\n  const autoInsertSpace = computed(\n    () => props.autoInsertSpace ?? globalConfig.value?.autoInsertSpace ?? false\n  )\n\n  // add space between two characters in Chinese\n  const shouldAddSpace = computed(() => {\n    const defaultSlot = slots.default?.()\n    if (autoInsertSpace.value && defaultSlot?.length === 1) {\n      const slot = defaultSlot[0]\n      if (slot?.type === Text) {\n        const text = slot.children as string\n        return /^\\p{Unified_Ideograph}{2}$/u.test(text.trim())\n      }\n    }\n    return false\n  })\n\n  const handleClick = (evt: MouseEvent) => {\n    if (props.nativeType === 'reset') {\n      form?.resetFields()\n    }\n    emit('click', evt)\n  }\n\n  return {\n    _disabled,\n    _size,\n    _type,\n    _ref,\n    shouldAddSpace,\n    handleClick,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}